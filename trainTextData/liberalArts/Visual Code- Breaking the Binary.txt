VISUAL CODE

BREAKING THE BINARY

INTRODUCTION
“DECODING CODING”
Access to introductory code and programming education remains
i n c r e d i b l y l o w. T h e c o m p u t e r, o n c e t o u t e d a s " t h e G r e a t E q u a l i z e r "
a n d " b i cyc l e fo r t h e m i n d " re m a i n s f u l l y ava i l a b l e o n l y to t h e few.
Y e t t h e r e a r e c o u n t l e s s i n n o v a t i o n s y e t t o b e m a d e i n t h e fi e l d o f
computing. This is startling, considering how much change it has
already made in our lives. In a world driven by computing, programming and computer science should be accessible to everyone.
C u r r e n t s o l u t i o n s a r e h i g h l y s k e w e d t o w a r d s m o r e " s c i e n t i fi c " t h i n k ers. In our interviews with over 400 people, this theme of their experiences became quickly evident. An overwhelming number of
people shared that they were turned away from code and programm i n g w i t h i n t h e i r fi r s t h o u r o f e x p e r i e n c e w i t h t h e t o p i c . C o n s i s t e n t l y, p e o p l e re l a te d t h a t t h e y q u i c k l y h it a “ w a l l o f m a t h a n d a l g o r it h m s” . A l a r m i n g l y, m a n y h a d s u c h a n e g a t i v e ex p e r i e n c e t h a t t h e y
fe l t t h e y w o u l d n e v e r re v i s it c o d i n g e n t i re l y. C u r re n t l y, t h e re i s a
huge emphasis on teaching code and programming across the United
States, often in the context of the "Hour of Code" program, in which
y o u n g p e o p l e a r e i n t r o d u c e d t o t h e t o p i c i n j u s t a n h o u r. I f t h e s e
programs are failing an overwhelming percentage of students, howe v e r, a l t e r n a t i v e m e t h o d s o f i n t r o d u c i n g t h e s u b j e c t b e c o m e n e c e s s a r y.
This project seeks to create an accessible programming language
that is more visually based. Although some solutions exist, namely
MIT’s Scratch, nothing has caught up to the mobile age. This project aims to reframe creating a game or app into the context of telli n g a s t o r y , p u t t i n g c h a r a c t e r c r e a t i o n fi r s t . B y r e s e a r c h i n g s t o ry-telling and how people learn, and by applying technical and user
interface design knowledge, this project intends to deliver a software solution that opens introductory coding education to more
people.

1

O N LY

1 /4

OF U.S. SCHOOLS

OFFER COMPUTER
SCIENCE CLASSES
Code.org

2

OUR TEAM

Jacob Johannesen
Design

Andrew Adriance
Development

3

SECTION 2
RESEARCH

4

Inaccessibility In Computer Science:
A L o n g s t a n d i n g Tr a d i t i o n
Access to introductory code and programming education remains
i n c r e d i b l y l o w. T h e c o m p u t e r, o n c e t o u t e d a s " t h e G r e a t E q u a l i z e r "
a n d " b i cyc l e fo r t h e m i n d " re m a i n s f u l l y ava i l a b l e o n l y to t h e few.
Y e t t h e r e a r e c o u n t l e s s i n n o v a t i o n s y e t t o b e m a d e i n t h e fi e l d o f
computing. This is startling, considering how much change it has
already made in our lives. In a world driven by computing, programming and computer science should be accessible to everyone.
C u r r e n t s o l u t i o n s a r e h i g h l y s k e w e d t o w a r d s m o r e " s c i e n t i fi c " t h i n k ers. In our interviews with over 400 people, this theme of their experiences became quickly evident. An overwhelming number of
people shared that they were turned away from code and programm i n g w i t h i n t h e i r fi r s t h o u r o f e x p e r i e n c e w i t h t h e t o p i c . C o n s i s t e n t l y, p e o p l e re l a te d t h a t t h e y q u i c k l y h it a “ w a l l o f m a t h a n d a l g o r it h m s” . A l a r m i n g l y, m a n y h a d s u c h a n e g a t i v e ex p e r i e n c e t h a t t h e y
fe l t t h e y w o u l d n e v e r re v i s it c o d i n g e n t i re l y. C u r re n t l y, t h e re i s a
huge emphasis on teaching code and programming across the United
States, often in the context of the "Hour of Code" program, in which
y o u n g p e o p l e a r e i n t r o d u c e d t o t h e t o p i c i n j u s t a n h o u r. I f t h e s e
programs are failing an overwhelming percentage of students, howe v e r, a l t e r n a t i v e m e t h o d s o f i n t r o d u c i n g t h e s u b j e c t b e c o m e n e c e s s a r y.
This project seeks to create an accessible programming language
that is more visually based. Although some solutions exist, namely
MIT’s Scratch, nothing has caught up to the mobile age. This project aims to reframe creating a game or app into the context of telli n g a s t o r y , p u t t i n g c h a r a c t e r c r e a t i o n fi r s t . B y r e s e a r c h i n g s t o ry-telling and how people learn, and by applying technical and user
interface design knowledge, this project intends to deliver a software solution that opens introductory coding education to more
people.

5

Seymour Papert's Mindstorms:
L o o k i n g B a c k 3 6 Ye a r s
S e y m o u r P a p e r t h a s b e e n a l e a d i n g fi g u r e i n c o m p u t e r s c i e n c e e d u cation for young people, and practically invented even the notion of
it. He has spent this greater part of his life on this issue, and wrote
Mindstorms: Children, Computers, and Powerful Ideas in 1980. He
also helped to create the Logo educational programming language.
Is his own words:
In most contemporary educational situations where children come
into contact with computers the computer is used to put children
through their paces, to provide exercises of an appropriate level
o f d i f fi c u l t y , t o p r o v i d e f e e d b a c k , a n d t o d i s p e n s e i n f o r m a t i o n .
The computer programming the child. In the LOGO environment the
relationship is reversed: The child, even at preschool ages, is in
c o n t r o l : T h e c h i l d p r o g r a m s t h e c o m p u t e r.
Pa p e r t b u i l d s o n t h i s c a p a b i l it y o f c o m p u te r s a s a te c h n o l o g y, e m phasizing the importance of the platform's interactive nature.
Beyond this, he even relates computers to the advent of the printing
press--a technology with the potential to completely change information, but this time not only in the way we communicate that
information, but also in the way we create and produce it.
With speaking of such change, Papert is quick to mention the potent i a l d ra w b a c ks o f t h e p o s t- c o m p u te r s o c i e t y. Pa p e r t m e n t i o n s t h e
techno-Utopian critics of 1980, who fear that the "holding power"
and psychological effects of computers can be incredibly detrimental to to mind. 1980's fears even include "students spending sleepless nights riveted to the computer terminal, coming to neglect both
studies and social contact". In 2016, this fear continues and has
e s s e n t i a l l y b e e n p r o v e n t r u e . Te c h n o l o g i e s t h a t w e r e u n f o r e s e e a b l e
in 1980, including social media and engrossing video games, are a
huge source of addiction. A recent report by Common Sense Media
has found that teens spend an average of six hours a day using
s o c i a l m e d i a . U l t i m a te l y, te e n a g e r s o f 2 0 1 5 (y e a r o f s t u d y) re p re s e n t o n e o f t h e fi r s t g e n e r a t i o n s t o g r o w u p h a v i n g c o m p l e t e a c c e s s
t o t h e i n t e r n e t a n d s o c i a l m e d i a , m a k i n g t h e s e fi n d i n g s e s p e c i a l l y
troubling.

6

P a p e r t , h o w e v e r, i n f a c t a g r e e d w i t h t h e c r i t i c s o f h i s t i m e , m a i n taining that while the negatives were real, it was important to focus
on and develop the computer's positive potential.

Logo: A Virtual Material
Seymour Papert worked with the MIT Media Lab to develop the LOGO
programming language. He believed that children learn best when
given material with which to create new things. LOGO is based on
the idea of a “turtle”, a simple and basic component that can be
used in various combinations to create more complex systems—similar to conventional programming languages. Nonetheless, LOGO is
very easy for anyone to simply pick up and start using. It is based
on simple movement commands—move forward, rotate to the right,
e t c . B y c h a i n i n g t h e s e b a s i c c o m m a n d s t o g e t h e r, L O G O u s e r s c a n
instruct the turtle to draw pictures. LOGO continues to have huge
i n fl u e n c e t o d a y , w i t h r e c e n t l y d e v e l o p e d i n t r o d u c t o r y c o d i n g p r o grams including Hopscotch that use similar principles.

Scratch: Puzzle Pieces
In 2002 Mitchel Resnick introduced Scratch—a visual programming
l a n g u a g e b a s e d o n s n a p p i n g p u z z l e - l i k e c o l o r e d b l o c k s t o g e t h e r.
This project, based upon Papert’s research, also came out of MIT’s
Media Lab. Scratch allows for more complicated programs and
games to be built than what was possible with LOGO, and the system
that it established continues to be a standard in introductory prog ra m m i n g e d u c a t i o n to d a y.

An Aging Standard
D e s p i t e b e i n g c r e a t e d a l m o s t 1 4 y e a r s a g o , S c r a t c h ’ s i n fl u e n c e r e mains strong in introductory programming.

7

A Standard That Hurts Students
In 2016, the world of technology is incredibly different than that of
2002. Despite this, there have been minimal efforts to create new
introductory system to engage students. Instead efforts, such as
code.org, have concentrated on pushing existing technology through
programs like Hour of Code. Through our interviews with over 200
educators, parents, and students we have found that while Scratch
h e l p s e n g a g e m o r e s t u d e n t s , a s i g n i fi c a n t p e r c e n t a g e o f s t u d e n t s
a r e s t i l l t u r n e d a w a y f r o m c o d e a n d p r o g r a m m i n g w i t h i n t h e fi r s t
h o u r o f i n t ro d u c t i o n to t h e s u b j e c t . U l t i m a te l y, w h i l e e f fo r t s to
increase computer science education at the organization level are
admirable, we also must focus on technology solutions that can
engage different types of learners.
Additionally troubling is the concern that STEM-focused education
overlooks, and in many cases even devalues the arts. People that we
t a l ke d to b ro u g h t t h i s p a i n p o i n t u p re p e a te d l y. I n o u r o w n s o l u t i o n ,
we seek to bridge the “divide” between art and computer science by
incorporating the arts throughout.

8

SECTION 3
DESIGN

9

Swift-Based iOS App
For this project, we decided to build our software solution for the
iOS platform. This is because iOS-based iPads are commonly used in
primary education settings.
We also considered developing for
Google Chrome—a platform that has quickly grown in popularity
w i t h i n s c h o o l s d u e t o l o w p r i c i n g . U l t i m a t e l y, h o w e v e r, w e f o u n d
through interviews that students, parents, and educators alike had
incredibly negative experiences with the platform. Beyond this,
mobile devices have an unparalleled ability to engage younger audiences.

Overall Flow
Ease of use is mission critical to our software solution. Our app has
to be easy to navigate and understand. When researching competing
apps, we consistently found context issues. Sub-menus of these
apps built up and up, obscuring their purpose.
For our software solution, we knew that our goal of having users
build their own games and apps made it incredibly tempting to build
u p s i m i l a r l a y e r s o f c o m p l ex it y. I n s te a d , w e d e c i d e d to b re a k d o w n
the navigation into easy to understand and universal parts.

Navigation Bar
The navigation bar allows users to move between the different parts
t h a t m a k e u p t h e i r a p p o r g a m e . W e h a v e d e fi n e d t h e s e t h r e e s e c tions as objects, code, and scene.
Objects
This section is where users can create new objects. Objects are
t h e fi r s t s e c t i o n f o r a r e a s o n — a s b o t h t h e c o d e a n d s c e n e s e c tions build upon and use these objects. Beyond this, interviews
a n d r e s e a r c h i d e n t i fi e d o b j e c t s ( o r c h a r a c t e r s ) a s t h e s t a r t i n g
point when someone without coding experience thought about
building a game.
Code
This section is where users can add behaviors to objects that
they created in ‘Objects’.

10

Scene
The scene allows users to place the objects they have created
into a world.

Objects Bar
The objects bar is located on the left on the screen, and importantly
is persistent whether users are currently in the objects, code, or
scene section. All sections relate back to objects, and so access to
them is always upfront.

Widgets
Widgets pop up when a user wants to do some more advanced customization. Widgets interrupt the app, blurring the previous context
and creating a new one on top. Widgets cannot link to anything else.
With only one level of abstraction at a time possible, widgets seek
t o m a k e c o d i n g t h a t fi r s t a p p o r g a m e l e s s c o n f u s i n g .

B u i l d i n g f r o m C o m p o n e n t s , N o t Te m p l a t e s
A common complaint among interviewees is that Scratch-based
solutions only offer stock images to use in games. Beyond this,
some solutions offer very primitive templates from which to create
characters. Drawing inspiration from LEGO bricks and Minecraft, we
have decided to take a more modular approach. In our design, component pieces can be combined in a variety of ways to create a huge
variety of objects. In his writings on how kids learn with computers,
Seymour Papert constantly relates back to the idea of “materials”
that can be shaped built upon. For our software, we want to make
sure that even the graphics were based on what the user wanted to
make. No templates or pre-made junk here.

11

N AV I G AT I O N B A R

OBJECTS

CODE

ACTIONS

SCENE

EVENTS

Collision With

OBJECTS BAR

12

WIDGETS
S e t G r av i t y
OBJECTS

CODE

SCENE

ACTIONS

EVENTS

Game Starts

GRAVITY
-9.8

Move

Rotate

ACTIONS

Stop

Teleport

EVENTS

Game Starts

00 : 15

TIME

00:15

Move

Rotate

Set TIMER

13

Stop

Teleport

BUILDER
Uses components, similar
to LEGO bricks.

14

SECTION 4
PErSONAS

15

Name
Matthew Murillo
Age
18
City
G i l ro y, C a l i fo r n i a
Access to Computer Science Classes
Low
Description
Matthew is a senior at Gilroy High School. He excels at school, but
is worried about starting a computer science degree at Berkeley in
the Fall after not passing the AP Computer Science exam. He has a
passion for computers, but his school simply doesn’t offer computer science classes—so the knowledge he does have, he learned on
his own
T h i s y e a r, M a t t h a s e v e n c o l l a b o r a t e d w i t h f r i e n d s o n a n a p p t h e y
were planning to build. The idea was a space-themed game, and the
group used Google Drive to share story lines and sketches. When it
c a m e t i m e t o a c t u a l l y b u i l d t h e g a m e , h o w e v e r , t h e i r p l a n s f e l l fl a t
with a short-lived journey into coding and programming apps.
As he remembers the experience he wonders if maybe computer
science just isn’t for him.

16

Name
Melissa Benjamin
Age
12
City
Bellevue, Washington
Access to Computer Science Classes
Very High
Description
Melissa started coding in elementary school, and has a real talent
for it. She makes simple apps in her free time using Scratch, which
she learned at her STEM-focused and very well funded school.
N o w t h a t M e l i s s a ’ s i n m i d d l e s c h o o l , h o w e v e r, s h e ’ s s t a r t i n g t o
notice some things. When encountering a problem in coding, Melissa
visualizes herself inside the computer and talks about the iPad as if
it were a person. When she communicates this way of thinking to
h e r p e e r s , h o w e v e r, t h e y l a u g h a t h e r a n d c a l l h e r w r o n g . T h i s d e spite the fact that she consistently does better than them with
tough problems in code. Melissa decides it’s easier to simply not
explain her coding problems in the way that she actually thinks
a b o u t t h e m fo r n ow.

17

SECTION 5
Concluding thoughts

18

A n a l y s i s a n d V e r i fi c a t i o n o f S u c c e s s
For this project, success will be measured by ability of users to
complete certain tasks. In some cases, this may be on a scale of 1 1 0 b a s e d o n h o w d i f fi c u l t o r e a s y s a i d t a s k w a s t o c o m p l e t e . T h e s e
measurements will be taken with subjects who use both our software solution and existing software. We will then be able to assess
the percentage difference in ease of use of our software.
Beyond this we will also be measuring user engagement, and perception of code and programming based on their experience with
our software.

Interviews
In interviews with over 200 educators, parents, and students we
a t t e m p t e d t o n a r r o w d o w n s p e c i fi c c o n c e r n s t h a t r e s o n a t e d w i t h
people. A top concern among those we spoke to was “a wall of algorithms, math and code”, “coding being boring”, and “being unable to
express creativity on the computer”.

Societal Impacts
A l r e a d y , r e s e a r c h s h o w s t h e fi e l d o f c o m p u t e r s c i e n c e t o b e i n a c c e s s i b l e to m a n y. N o n e t h e l e s s , o u r s o c i e t y c o n t i n u e s to p u s h y o u n g
p e o p l e t o w a r d s t h e fi e l d s — w h i l e n o t a t t e m p t i n g t o u n d e r s t a n d t h e
i s s u e o f w h y s o m a n y a r e t u r n e d a w a y i n t h e fi r s t p l a c e . U l t i m a t e l y ,
this project aims to build a more accessible introduction to code
and programming.

Future Work and Next Steps
For this project, we plan to eventually release our software solution
as a consumer product.

19

Conclusion
In 2016, information and technology dominates our lives—with data
being collected on every aspect of the way we live our lives and
screens becoming an extension of our own body and mind. While our
u s e o f te c h n o l o g y h a s i n c re a s e d ex p o n e n t i a l l y, o u r a b i l it y to p ro gram computers has simply not caught up. This is not only economic a l l y d e v a s t a t i n g , w i t h t e c h n o l o g y c o m p a n i e s u n a b l e t o fi l l p o s i t i o n s , b u t a l s o c u l t u r a l l y p r o b l e m a t i c . T h e c o m p u t e r, a s d e s c r i b e d
by Seymour Papert, is an incredible tool because of it’s bidirectiona l n a t u re — it c a n t a l k to y o u a n d , i n t h e o r y, y o u c a n t a l k b a c k t h o u g h
code and programs.
Beyond this, a certain culture has developed around computer science and programming. This culture has created a mythology of
programmers as “wizards” and “rock stars”, terminology used in
many Silicon Valley job descriptions. Sprawling corporate campuses
claim to shelter “top talent” as they “lead the world” though “innovations” that in reality are little more than a phone with a slightly
i m p r o v e d c a m e r a o r 1 0 % m o r e p r o c e s s i n g p o w e r.
U l t i m a te l y, Pa p e r t ’ s v i s i o n o f t h e c o m p u te r a s a to o l fo r e v e r y o n e
has not been realized. In his writings, he compares the computer to
t h e a d v e n t o f t h e p r i n t i n g p r e s s . To d a y, w e a r e f a c e d w i t h t h e q u e s tion of whether we will promote computer literacy for all or continue to reinforce the “Silicon Valley ” mentality of computing for the
few.

20

WORKS CITED

Works Cited
" Ev e r y C h i l d D e s e r v e s O p p o r t u n it y. " C o d e . o rg . C o d e . o rg , n . d . We b . 8
May 2016.
P a p e r t , S e y m o u r. M i n d s t o r m s : C h i l d r e n , C o m p u t e r s , a n d P o w e r f u l
I d e a s . N e w Yo r k : B a s i c , 1 9 9 3 . P r i n t .
"Scratch - Imagine, Program, Share." Scratch Help. MIT Media Lab,
n.d. Web. 8 May 2016.
Tu r k l e , S h e r r y, a n d S e y m o u r P a p e r t . " E p i s t e m o l o g i c a l P l u r a l i s m :
Styles and Voices within the Computer Culture." Signs: Journal of
W o m e n i n C u l t u r e a n d S o c i e t y 1 6 . 1 ( 1 9 9 0 ) : 1 2 8 - 5 7. W e b .

